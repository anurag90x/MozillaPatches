3b9237d8 mozharness/base/script.py
--- a/mozharness/base/script.py	Thu Dec 18 18:09:56 2014 -0500
+++ b/mozharness/base/script.py	Thu Dec 18 23:11:07 2014 -0500
@@ -44,6 +44,7 @@
     import json
 
 from mozprocess import ProcessHandler
+from mozharness.lib.python import cert_verifier
 from mozharness.base.config import BaseConfig
 from mozharness.base.log import SimpleFileLogger, MultiFileLogger, \
     LogMixin, OutputParser, DEBUG, INFO, ERROR, FATAL
@@ -191,12 +192,14 @@
         else:
             return parsed.netloc
 
-    def _urlopen(self, url, **kwargs):
+    def _urlopen(self, url, certs, **kwargs):
         """ This method can be overwritten to extend its complexity
         """
+        if not certs == None:
+            cert_verifier.verify_ssl_cert(self.log_obj, certs)
         return urllib2.urlopen(url, **kwargs)
 
-    def _download_file(self, url, file_name):
+    def _download_file(self, url, file_name, certi_loc=None):
         """ Helper script for download_file()
         """
         # If our URLs look like files, prefix them with file:// so they can
@@ -208,7 +211,7 @@
 
         try:
             f_length = None
-            f = self._urlopen(url, timeout=30)
+            f = self._urlopen(url, certi_loc, timeout=30)
 
             if f.info().get('content-length') is not None:
                 f_length = int(f.info()['content-length'])
diff -r f05a3b9237d8 mozharness/lib/__init__.py
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/mozharness/lib/__init__.py	Thu Dec 18 23:11:07 2014 -0500
@@ -0,0 +1,1 @@
+ 
\ No newline at end of file
diff -r f05a3b9237d8 mozharness/lib/python/__init__.py
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/mozharness/lib/python/__init__.py	Thu Dec 18 23:11:07 2014 -0500
@@ -0,0 +1,1 @@
+ 
\ No newline at end of file
diff -r f05a3b9237d8 mozharness/lib/python/cert_verifier.py
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/mozharness/lib/python/cert_verifier.py	Thu Dec 18 23:11:07 2014 -0500
@@ -0,0 +1,90 @@
+#! /usr/bin/env python
+# Based on
+# http://thejosephturner.com/blog/post/https-certificate-verification-in-python-with-urllib2/
+
+'''
+To use the wrap_socket with CERT_REQUIRED or CERT_OPTIONAL, you need to
+provide a file with root certificate information. This has to be in PEM
+format and can be obtained from :
+https://www.geotrust.com/resources/root-certificates/
+
+This is explained at :
+https://docs.python.org/2/library/ssl.html in the Certificates section.
+
+'''
+
+import urllib2
+import httplib
+import socket
+import ssl
+import os
+
+from mozharness.base.log import LogMixin
+
+
+class VerifiedHTTPSConnection(httplib.HTTPSConnection, LogMixin):
+    """ HTTPSConnection subclass that wraps socket in ssl layer """
+
+    ca_certs = None
+    logger = None
+
+    def connect(self):
+        # overrides the version in httplib so that we do
+        #    certificate verification
+        sock = socket.create_connection((self.host, self.port),
+                                        self.timeout)
+        if self._tunnel_host:
+            self.sock = sock
+            self._tunnel()
+        # wrap the socket using verification with the root
+        #    certs in trusted_root_certs
+        ssl_level = ssl.CERT_REQUIRED
+        if not VerifiedHTTPSConnection.ca_certs:
+            ssl_level = ssl.CERT_NONE
+
+        self.log_obj = VerifiedHTTPSConnection.logger
+
+        if not os.path.isfile(VerifiedHTTPSConnection.ca_certs):
+            self.critical("Failed to find certificate file at %s " %
+                          VerifiedHTTPSConnection.ca_certs)
+
+        self.info("Verifyng SSL cert certification at %s" %
+                  VerifiedHTTPSConnection.ca_certs)
+
+        self.sock = ssl.wrap_socket(sock,
+                                    self.key_file,
+                                    self.cert_file,
+                                    cert_reqs=ssl_level,
+                                    ca_certs=VerifiedHTTPSConnection.ca_certs)
+
+# wraps https connections with ssl certificate verification
+
+
+class VerifiedHTTPSHandler(urllib2.HTTPSHandler):
+    """ HTTPSHandler subclass that utilizes VerifiedHTTPSConnection """
+
+    def __init__(self, ca_certs=None,
+                 connection_class=VerifiedHTTPSConnection):
+
+        connection_class.ca_certs = ca_certs
+        self.specialized_conn_class = connection_class
+        urllib2.HTTPSHandler.__init__(self)
+
+    def https_open(self, req):
+        return self.do_open(self.specialized_conn_class, req)
+
+
+def get_opener(ca_certs):
+    """ Returns opener object to be used as global opener for urlopen """
+
+    https_handler = VerifiedHTTPSHandler(ca_certs)
+    url_opener = urllib2.build_opener(https_handler)
+
+    return url_opener
+
+
+def verify_ssl_cert(log_obj, cert_file):
+    """ Entry method. Installs opener """
+
+    VerifiedHTTPSConnection.logger = log_obj
+    urllib2.install_opener(get_opener(cert_file))
3b9237d8 mozharness/base/script.py
--- a/mozharness/base/script.py	Thu Dec 18 18:09:56 2014 -0500
+++ b/mozharness/base/script.py	Thu Dec 18 23:11:07 2014 -0500
@@ -44,6 +44,7 @@
     import json
 
 from mozprocess import ProcessHandler
+from mozharness.lib.python import cert_verifier
 from mozharness.base.config import BaseConfig
 from mozharness.base.log import SimpleFileLogger, MultiFileLogger, \
     LogMixin, OutputParser, DEBUG, INFO, ERROR, FATAL
@@ -191,12 +192,14 @@
         else:
             return parsed.netloc
 
-    def _urlopen(self, url, **kwargs):
+    def _urlopen(self, url, certs, **kwargs):
         """ This method can be overwritten to extend its complexity
         """
+        if not certs == None:
+            cert_verifier.verify_ssl_cert(self.log_obj, certs)
         return urllib2.urlopen(url, **kwargs)
 
-    def _download_file(self, url, file_name):
+    def _download_file(self, url, file_name, certi_loc=None):
         """ Helper script for download_file()
         """
         # If our URLs look like files, prefix them with file:// so they can
@@ -208,7 +211,7 @@
 
         try:
             f_length = None
-            f = self._urlopen(url, timeout=30)
+            f = self._urlopen(url, certi_loc, timeout=30)
 
             if f.info().get('content-length') is not None:
                 f_length = int(f.info()['content-length'])
diff -r f05a3b9237d8 mozharness/lib/__init__.py
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/mozharness/lib/__init__.py	Thu Dec 18 23:11:07 2014 -0500
@@ -0,0 +1,1 @@
+ 
\ No newline at end of file
diff -r f05a3b9237d8 mozharness/lib/python/__init__.py
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/mozharness/lib/python/__init__.py	Thu Dec 18 23:11:07 2014 -0500
@@ -0,0 +1,1 @@
+ 
\ No newline at end of file
diff -r f05a3b9237d8 mozharness/lib/python/cert_verifier.py
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/mozharness/lib/python/cert_verifier.py	Thu Dec 18 23:11:07 2014 -0500
@@ -0,0 +1,90 @@
+#! /usr/bin/env python
+# Based on
+# http://thejosephturner.com/blog/post/https-certificate-verification-in-python-with-urllib2/
+
+'''
+To use the wrap_socket with CERT_REQUIRED or CERT_OPTIONAL, you need to
+provide a file with root certificate information. This has to be in PEM
+format and can be obtained from :
+https://www.geotrust.com/resources/root-certificates/
+
+This is explained at :
+https://docs.python.org/2/library/ssl.html in the Certificates section.
+
+'''
+
+import urllib2
+import httplib
+import socket
+import ssl
+import os
+
+from mozharness.base.log import LogMixin
+
+
+class VerifiedHTTPSConnection(httplib.HTTPSConnection, LogMixin):
+    """ HTTPSConnection subclass that wraps socket in ssl layer """
+
+    ca_certs = None
+    logger = None
+
+    def connect(self):
+        # overrides the version in httplib so that we do
+        #    certificate verification
+        sock = socket.create_connection((self.host, self.port),
+                                        self.timeout)
+        if self._tunnel_host:
+            self.sock = sock
+            self._tunnel()
+        # wrap the socket using verification with the root
+        #    certs in trusted_root_certs
+        ssl_level = ssl.CERT_REQUIRED
+        if not VerifiedHTTPSConnection.ca_certs:
+            ssl_level = ssl.CERT_NONE
+
+        self.log_obj = VerifiedHTTPSConnection.logger
+
+        if not os.path.isfile(VerifiedHTTPSConnection.ca_certs):
+            self.critical("Failed to find certificate file at %s " %
+                          VerifiedHTTPSConnection.ca_certs)
+
+        self.info("Verifyng SSL cert certification at %s" %
+                  VerifiedHTTPSConnection.ca_certs)
+
+        self.sock = ssl.wrap_socket(sock,
+                                    self.key_file,
+                                    self.cert_file,
+                                    cert_reqs=ssl_level,
+                                    ca_certs=VerifiedHTTPSConnection.ca_certs)
+
+# wraps https connections with ssl certificate verification
+
+
+class VerifiedHTTPSHandler(urllib2.HTTPSHandler):
+    """ HTTPSHandler subclass that utilizes VerifiedHTTPSConnection """
+
+    def __init__(self, ca_certs=None,
+                 connection_class=VerifiedHTTPSConnection):
+
+        connection_class.ca_certs = ca_certs
+        self.specialized_conn_class = connection_class
+        urllib2.HTTPSHandler.__init__(self)
+
+    def https_open(self, req):
+        return self.do_open(self.specialized_conn_class, req)
+
+
+def get_opener(ca_certs):
+    """ Returns opener object to be used as global opener for urlopen """
+
+    https_handler = VerifiedHTTPSHandler(ca_certs)
+    url_opener = urllib2.build_opener(https_handler)
+
+    return url_opener
+
+
+def verify_ssl_cert(log_obj, cert_file):
+    """ Entry method. Installs opener """
+
+    VerifiedHTTPSConnection.logger = log_obj
+    urllib2.install_opener(get_opener(cert_file))
3b9237d8 mozharness/base/script.py
--- a/mozharness/base/script.py	Thu Dec 18 18:09:56 2014 -0500
+++ b/mozharness/base/script.py	Thu Dec 18 23:11:07 2014 -0500
@@ -44,6 +44,7 @@
     import json
 
 from mozprocess import ProcessHandler
+from mozharness.lib.python import cert_verifier
 from mozharness.base.config import BaseConfig
 from mozharness.base.log import SimpleFileLogger, MultiFileLogger, \
     LogMixin, OutputParser, DEBUG, INFO, ERROR, FATAL
@@ -191,12 +192,14 @@
         else:
             return parsed.netloc
 
-    def _urlopen(self, url, **kwargs):
+    def _urlopen(self, url, certs, **kwargs):
         """ This method can be overwritten to extend its complexity
         """
+        if not certs == None:
+            cert_verifier.verify_ssl_cert(self.log_obj, certs)
         return urllib2.urlopen(url, **kwargs)
 
-    def _download_file(self, url, file_name):
+    def _download_file(self, url, file_name, certi_loc=None):
         """ Helper script for download_file()
         """
         # If our URLs look like files, prefix them with file:// so they can
@@ -208,7 +211,7 @@
 
         try:
             f_length = None
-            f = self._urlopen(url, timeout=30)
+            f = self._urlopen(url, certi_loc, timeout=30)
 
             if f.info().get('content-length') is not None:
                 f_length = int(f.info()['content-length'])
diff -r f05a3b9237d8 mozharness/lib/__init__.py
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/mozharness/lib/__init__.py	Thu Dec 18 23:11:07 2014 -0500
@@ -0,0 +1,1 @@
+ 
\ No newline at end of file
diff -r f05a3b9237d8 mozharness/lib/python/__init__.py
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/mozharness/lib/python/__init__.py	Thu Dec 18 23:11:07 2014 -0500
@@ -0,0 +1,1 @@
+ 
\ No newline at end of file
diff -r f05a3b9237d8 mozharness/lib/python/cert_verifier.py
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/mozharness/lib/python/cert_verifier.py	Thu Dec 18 23:11:07 2014 -0500
@@ -0,0 +1,90 @@
+#! /usr/bin/env python
+# Based on
+# http://thejosephturner.com/blog/post/https-certificate-verification-in-python-with-urllib2/
+
+'''
+To use the wrap_socket with CERT_REQUIRED or CERT_OPTIONAL, you need to
+provide a file with root certificate information. This has to be in PEM
+format and can be obtained from :
+https://www.geotrust.com/resources/root-certificates/
+
+This is explained at :
+https://docs.python.org/2/library/ssl.html in the Certificates section.
+
+'''
+
+import urllib2
+import httplib
+import socket
+import ssl
+import os
+
+from mozharness.base.log import LogMixin
+
+
+class VerifiedHTTPSConnection(httplib.HTTPSConnection, LogMixin):
+    """ HTTPSConnection subclass that wraps socket in ssl layer """
+
+    ca_certs = None
+    logger = None
+
+    def connect(self):
+        # overrides the version in httplib so that we do
+        #    certificate verification
+        sock = socket.create_connection((self.host, self.port),
+                                        self.timeout)
+        if self._tunnel_host:
+            self.sock = sock
+            self._tunnel()
+        # wrap the socket using verification with the root
+        #    certs in trusted_root_certs
+        ssl_level = ssl.CERT_REQUIRED
+        if not VerifiedHTTPSConnection.ca_certs:
+            ssl_level = ssl.CERT_NONE
+
+        self.log_obj = VerifiedHTTPSConnection.logger
+
+        if not os.path.isfile(VerifiedHTTPSConnection.ca_certs):
+            self.critical("Failed to find certificate file at %s " %
+                          VerifiedHTTPSConnection.ca_certs)
+
+        self.info("Verifyng SSL cert certification at %s" %
+                  VerifiedHTTPSConnection.ca_certs)
+
+        self.sock = ssl.wrap_socket(sock,
+                                    self.key_file,
+                                    self.cert_file,
+                                    cert_reqs=ssl_level,
+                                    ca_certs=VerifiedHTTPSConnection.ca_certs)
+
+# wraps https connections with ssl certificate verification
+
+
+class VerifiedHTTPSHandler(urllib2.HTTPSHandler):
+    """ HTTPSHandler subclass that utilizes VerifiedHTTPSConnection """
+
+    def __init__(self, ca_certs=None,
+                 connection_class=VerifiedHTTPSConnection):
+
+        connection_class.ca_certs = ca_certs
+        self.specialized_conn_class = connection_class
+        urllib2.HTTPSHandler.__init__(self)
+
+    def https_open(self, req):
+        return self.do_open(self.specialized_conn_class, req)
+
+
+def get_opener(ca_certs):
+    """ Returns opener object to be used as global opener for urlopen """
+
+    https_handler = VerifiedHTTPSHandler(ca_certs)
+    url_opener = urllib2.build_opener(https_handler)
+
+    return url_opener
+
+
+def verify_ssl_cert(log_obj, cert_file):
+    """ Entry method. Installs opener """
+
+    VerifiedHTTPSConnection.logger = log_obj
+    urllib2.install_opener(get_opener(cert_file))
3b9237d8 mozharness/base/script.py
--- a/mozharness/base/script.py	Thu Dec 18 18:09:56 2014 -0500
+++ b/mozharness/base/script.py	Thu Dec 18 23:11:07 2014 -0500
@@ -44,6 +44,7 @@
     import json
 
 from mozprocess import ProcessHandler
+from mozharness.lib.python import cert_verifier
 from mozharness.base.config import BaseConfig
 from mozharness.base.log import SimpleFileLogger, MultiFileLogger, \
     LogMixin, OutputParser, DEBUG, INFO, ERROR, FATAL
@@ -191,12 +192,14 @@
         else:
             return parsed.netloc
 
-    def _urlopen(self, url, **kwargs):
+    def _urlopen(self, url, certs, **kwargs):
         """ This method can be overwritten to extend its complexity
         """
+        if not certs == None:
+            cert_verifier.verify_ssl_cert(self.log_obj, certs)
         return urllib2.urlopen(url, **kwargs)
 
-    def _download_file(self, url, file_name):
+    def _download_file(self, url, file_name, certi_loc=None):
         """ Helper script for download_file()
         """
         # If our URLs look like files, prefix them with file:// so they can
@@ -208,7 +211,7 @@
 
         try:
             f_length = None
-            f = self._urlopen(url, timeout=30)
+            f = self._urlopen(url, certi_loc, timeout=30)
 
             if f.info().get('content-length') is not None:
                 f_length = int(f.info()['content-length'])
diff -r f05a3b9237d8 mozharness/lib/__init__.py
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/mozharness/lib/__init__.py	Thu Dec 18 23:11:07 2014 -0500
@@ -0,0 +1,1 @@
+ 
\ No newline at end of file
diff -r f05a3b9237d8 mozharness/lib/python/__init__.py
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/mozharness/lib/python/__init__.py	Thu Dec 18 23:11:07 2014 -0500
@@ -0,0 +1,1 @@
+ 
\ No newline at end of file
diff -r f05a3b9237d8 mozharness/lib/python/cert_verifier.py
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/mozharness/lib/python/cert_verifier.py	Thu Dec 18 23:11:07 2014 -0500
@@ -0,0 +1,90 @@
+#! /usr/bin/env python
+# Based on
+# http://thejosephturner.com/blog/post/https-certificate-verification-in-python-with-urllib2/
+
+'''
+To use the wrap_socket with CERT_REQUIRED or CERT_OPTIONAL, you need to
+provide a file with root certificate information. This has to be in PEM
+format and can be obtained from :
+https://www.geotrust.com/resources/root-certificates/
+
+This is explained at :
+https://docs.python.org/2/library/ssl.html in the Certificates section.
+
+'''
+
+import urllib2
+import httplib
+import socket
+import ssl
+import os
+
+from mozharness.base.log import LogMixin
+
+
+class VerifiedHTTPSConnection(httplib.HTTPSConnection, LogMixin):
+    """ HTTPSConnection subclass that wraps socket in ssl layer """
+
+    ca_certs = None
+    logger = None
+
+    def connect(self):
+        # overrides the version in httplib so that we do
+        #    certificate verification
+        sock = socket.create_connection((self.host, self.port),
+                                        self.timeout)
+        if self._tunnel_host:
+            self.sock = sock
+            self._tunnel()
+        # wrap the socket using verification with the root
+        #    certs in trusted_root_certs
+        ssl_level = ssl.CERT_REQUIRED
+        if not VerifiedHTTPSConnection.ca_certs:
+            ssl_level = ssl.CERT_NONE
+
+        self.log_obj = VerifiedHTTPSConnection.logger
+
+        if not os.path.isfile(VerifiedHTTPSConnection.ca_certs):
+            self.critical("Failed to find certificate file at %s " %
+                          VerifiedHTTPSConnection.ca_certs)
+
+        self.info("Verifyng SSL cert certification at %s" %
+                  VerifiedHTTPSConnection.ca_certs)
+
+        self.sock = ssl.wrap_socket(sock,
+                                    self.key_file,
+                                    self.cert_file,
+                                    cert_reqs=ssl_level,
+                                    ca_certs=VerifiedHTTPSConnection.ca_certs)
+
+# wraps https connections with ssl certificate verification
+
+
+class VerifiedHTTPSHandler(urllib2.HTTPSHandler):
+    """ HTTPSHandler subclass that utilizes VerifiedHTTPSConnection """
+
+    def __init__(self, ca_certs=None,
+                 connection_class=VerifiedHTTPSConnection):
+
+        connection_class.ca_certs = ca_certs
+        self.specialized_conn_class = connection_class
+        urllib2.HTTPSHandler.__init__(self)
+
+    def https_open(self, req):
+        return self.do_open(self.specialized_conn_class, req)
+
+
+def get_opener(ca_certs):
+    """ Returns opener object to be used as global opener for urlopen """
+
+    https_handler = VerifiedHTTPSHandler(ca_certs)
+    url_opener = urllib2.build_opener(https_handler)
+
+    return url_opener
+
+
+def verify_ssl_cert(log_obj, cert_file):
+    """ Entry method. Installs opener """
+
+    VerifiedHTTPSConnection.logger = log_obj
+    urllib2.install_opener(get_opener(cert_file))
3b9237d8 mozharness/base/script.py
--- a/mozharness/base/script.py	Thu Dec 18 18:09:56 2014 -0500
+++ b/mozharness/base/script.py	Thu Dec 18 23:11:07 2014 -0500
@@ -44,6 +44,7 @@
     import json
 
 from mozprocess import ProcessHandler
+from mozharness.lib.python import cert_verifier
 from mozharness.base.config import BaseConfig
 from mozharness.base.log import SimpleFileLogger, MultiFileLogger, \
     LogMixin, OutputParser, DEBUG, INFO, ERROR, FATAL
@@ -191,12 +192,14 @@
         else:
             return parsed.netloc
 
-    def _urlopen(self, url, **kwargs):
+    def _urlopen(self, url, certs, **kwargs):
         """ This method can be overwritten to extend its complexity
         """
+        if not certs == None:
+            cert_verifier.verify_ssl_cert(self.log_obj, certs)
         return urllib2.urlopen(url, **kwargs)
 
-    def _download_file(self, url, file_name):
+    def _download_file(self, url, file_name, certi_loc=None):
         """ Helper script for download_file()
         """
         # If our URLs look like files, prefix them with file:// so they can
@@ -208,7 +211,7 @@
 
         try:
             f_length = None
-            f = self._urlopen(url, timeout=30)
+            f = self._urlopen(url, certi_loc, timeout=30)
 
             if f.info().get('content-length') is not None:
                 f_length = int(f.info()['content-length'])
diff -r f05a3b9237d8 mozharness/lib/__init__.py
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/mozharness/lib/__init__.py	Thu Dec 18 23:11:07 2014 -0500
@@ -0,0 +1,1 @@
+ 
\ No newline at end of file
diff -r f05a3b9237d8 mozharness/lib/python/__init__.py
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/mozharness/lib/python/__init__.py	Thu Dec 18 23:11:07 2014 -0500
@@ -0,0 +1,1 @@
+ 
\ No newline at end of file
diff -r f05a3b9237d8 mozharness/lib/python/cert_verifier.py
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/mozharness/lib/python/cert_verifier.py	Thu Dec 18 23:11:07 2014 -0500
@@ -0,0 +1,90 @@
+#! /usr/bin/env python
+# Based on
+# http://thejosephturner.com/blog/post/https-certificate-verification-in-python-with-urllib2/
+
+'''
+To use the wrap_socket with CERT_REQUIRED or CERT_OPTIONAL, you need to
+provide a file with root certificate information. This has to be in PEM
+format and can be obtained from :
+https://www.geotrust.com/resources/root-certificates/
+
+This is explained at :
+https://docs.python.org/2/library/ssl.html in the Certificates section.
+
+'''
+
+import urllib2
+import httplib
+import socket
+import ssl
+import os
+
+from mozharness.base.log import LogMixin
+
+
+class VerifiedHTTPSConnection(httplib.HTTPSConnection, LogMixin):
+    """ HTTPSConnection subclass that wraps socket in ssl layer """
+
+    ca_certs = None
+    logger = None
+
+    def connect(self):
+        # overrides the version in httplib so that we do
+        #    certificate verification
+        sock = socket.create_connection((self.host, self.port),
+                                        self.timeout)
+        if self._tunnel_host:
+            self.sock = sock
+            self._tunnel()
+        # wrap the socket using verification with the root
+        #    certs in trusted_root_certs
+        ssl_level = ssl.CERT_REQUIRED
+        if not VerifiedHTTPSConnection.ca_certs:
+            ssl_level = ssl.CERT_NONE
+
+        self.log_obj = VerifiedHTTPSConnection.logger
+
+        if not os.path.isfile(VerifiedHTTPSConnection.ca_certs):
+            self.critical("Failed to find certificate file at %s " %
+                          VerifiedHTTPSConnection.ca_certs)
+
+        self.info("Verifyng SSL cert certification at %s" %
+                  VerifiedHTTPSConnection.ca_certs)
+
+        self.sock = ssl.wrap_socket(sock,
+                                    self.key_file,
+                                    self.cert_file,
+                                    cert_reqs=ssl_level,
+                                    ca_certs=VerifiedHTTPSConnection.ca_certs)
+
+# wraps https connections with ssl certificate verification
+
+
+class VerifiedHTTPSHandler(urllib2.HTTPSHandler):
+    """ HTTPSHandler subclass that utilizes VerifiedHTTPSConnection """
+
+    def __init__(self, ca_certs=None,
+                 connection_class=VerifiedHTTPSConnection):
+
+        connection_class.ca_certs = ca_certs
+        self.specialized_conn_class = connection_class
+        urllib2.HTTPSHandler.__init__(self)
+
+    def https_open(self, req):
+        return self.do_open(self.specialized_conn_class, req)
+
+
+def get_opener(ca_certs):
+    """ Returns opener object to be used as global opener for urlopen """
+
+    https_handler = VerifiedHTTPSHandler(ca_certs)
+    url_opener = urllib2.build_opener(https_handler)
+
+    return url_opener
+
+
+def verify_ssl_cert(log_obj, cert_file):
+    """ Entry method. Installs opener """
+
+    VerifiedHTTPSConnection.logger = log_obj
+    urllib2.install_opener(get_opener(cert_file))

